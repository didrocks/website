First step of getting the ubuntu desktop bullet proof

----
GC
Why we need a GC
Runs once a day
Complex setup, because we have clones and snapshots on those clones, so we have dependencies (snapshots depending on clones depending on snapshots)
GC policy: default. This is tweakable by dropping a file in … which is the following (copying the files).
It means:
keep N amount of snapshots at least
keeping all snapshots for the past %s days

First System, then users

This is valid for users and systems snapshots (cleaning system snapshots first, and then fullfilling the dependencies on users)
Try to space evenly as much as possible snapshots (however, some have to be kept)
it’s keeping (at least)
If you want to force removing a snapshots, you have the zsysctl state remove command (with its dependencies).

Future work on garbage collection:
- purge before…
- be more agressive depending on remaining space.

---------
Other zsys features
* verbosity: client/service architecture, you can change the loglevel for the daemon (dropping to the journal) with zsysctl service loglevel.
You can stream in real time the verbose information for each request, and only for the current request with -v, -vv
* zsysctl service commands:
more internals: dump for logs internal state, force a gc collection, change temporary loglevel, force an internal refresh of zfs state, reload the daemon, ping for its status, stop it or activate temporarly the traces (type GCU and more) with examples
* There are some other hidden commands (they will shell complete subcommands if you press them) which are more for system and debug purposes. If you are interested, they are listed on the autogenerated README on github.
Any help on getting better log level, blabla, good way to contribute.
* Handling permissions polkit

* More information on how this all ties up:
* apt integration: apt hook (/etc…)
* hourly connected user snapshots (systemctl…)
(socket activated systemctl status .socket and .service)
* hourly GC service



-----
/!\ basic ZFS knowledge (like what is a datasets is expected starting from here <link to youtube video>

Partitions:
grub in EFI, ubuntu always creates now an EFI partition.
- Why grub in a fixed partition?
-> case of revert, if we revert grub (we revert the menu, but don’t update the dataset with install-grub and end up in limbo pointing the the previous grub installation and content)
- separate swap partition (what we learned enabling swap in zfs pool in previous release)
- separate bpool -> less features to be readable by grub than rpool. However, it’s versionned similarly than rpool and contents all kernels
- rpool with multiple types of datasets

Number of kernels in bpool
Technically: separate bpool for grub (and booting from a snapshot)


Challenge: /boot/grub mounts before zfs-mount.service is actived.
-> use of zfs mount generator (out of the way for non revert) create our .mount for all imported pools.
-> /etc/fstab for efi and grub

----
datasets types and how to use it

Why this dataset layout?

3 kinds of datasets:
- system datasets: rpool/ROOT/ubuntu_autogenerated + bpool/ equivalent
- user datasets: rpool/USERDATA/user_autogenerated
- persistent datasets: no state saved, always shared even if you revert.
-> not, rpool aren’t hardcoded. also USERDATA can be in any imported pool. USERS can even be distributed in multiple pools (but why would you do that?)

-> By default on desktop:
- <layout>

Why this layout, to allow people to have this kind of layout, like the one we could set on server:
- <layout 2>
-> keep database like mysql persistent
-> keep docker persistent
and so on…
while have apt, and other data linked to a system sets part of system datasets.

We will provide a command in the future to transition to this kind of datasets. For now, advanced users can do that with zfs rename.

Technically: separate bpool isn’t mandatory if you don’t enable features incompatbile with grub (and booting from a snapshot). So, if you have a manual layout, you can do that yourself,

So, we ends up with:
We prevent the initramfs to mount all datasets in rpool/ROOT -> indeed, /var/lib is maybe persistent, do that in the generator as well.
Use of zfs generator



* If you want to edit the default layout:
-> zsys-setup in ubiquity
Note: this is where people can also change their default installations and pool options. Do this with care though as some feature can break your installation! (for instance, the bpool features have been carefully picked to not break booking from grub, including when picking a snapshot)

Or like me:
- separate datasets for vm (persistent datasets)


## Getting more advanced in states

```sh
$ zsysctl show
Name:           rpool/ROOT/ubuntu_qiq15o
ZSys:           true
Last Used:      current
History:        
  - Name:       rpool/ROOT/ubuntu_qiq15o@autozsys_iynia9
    Created on: 2020-04-30 14:21:47
  - Name:       rpool/ROOT/ubuntu_qiq15o@mySavedState
    Created on: 2020-04-30 13:22:04
  - Name:       rpool/ROOT/ubuntu_idjvq9
    Created on: 2020-04-29 15:19:41
  - Name:       rpool/ROOT/ubuntu_idjvq9@autozsys_cwfpcd
    Created on: 2020-04-29 11:30:39
  - Name:       rpool/ROOT/ubuntu_qiq15o@autozsys_fgw65h
    Created on: 2020-04-29 10:15:48
  - Name:       rpool/ROOT/ubuntu_qiq15o@autozsys_wjdzc4
    Created on: 2020-04-29 10:10:26
  - Name:       rpool/ROOT/ubuntu_zums7p
    Created on: 2020-04-29 09:41:28
Users:
  - Name:    didrocks
    History: 
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_iynia9 (2020-04-30 14:21:48)
     - rpool/USERDATA/didrocks_e2jj0s@mySavedState (2020-04-30 13:22:04)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_nc0t07 (2020-04-30 14:20:53)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_wul29z (2020-04-30 13:20:01)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_7urchl (2020-04-30 12:20:01)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_okd3jd (2020-04-30 11:20:01)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_nvy9n8 (2020-04-30 10:20:01)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_ltvyzi (2020-04-30 09:20:05)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_nr4qgi (2020-04-29 18:21:03)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_tznx3z (2020-04-29 17:21:05)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_ha8ydo (2020-04-29 16:21:08)
     - rpool/USERDATA/didrocks_e2jj0s-rpool.ROOT.ubuntu-idjvq9 (2020-04-29 15:21:01)
     - rpool/USERDATA/didrocks_fsmk5b@autozsys_f94bcr (2020-04-29 15:18:20)
     - rpool/USERDATA/didrocks_fsmk5b@autozsys_k1lrce (2020-04-29 15:15:01)
     - rpool/USERDATA/didrocks_fsmk5b@autozsys_voi74a (2020-04-29 14:15:01)
     - rpool/USERDATA/didrocks_fsmk5b@autozsys_xx5xxz (2020-04-29 13:15:01)
     - rpool/USERDATA/didrocks_fsmk5b@autozsys_lww7fh (2020-04-29 12:15:01)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_cwfpcd (2020-04-29 11:30:39)
     - rpool/USERDATA/didrocks_fsmk5b@autozsys_w2929w (2020-04-29 11:15:06)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_fgw65h (2020-04-29 10:15:48)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_wjdzc4 (2020-04-29 10:10:26)
     - rpool/USERDATA/didrocks_e2jj0s@autozsys_2y0bud (2020-04-29 09:41:56)
     - rpool/USERDATA/didrocks_fsmk5b (2020-04-29 09:41:28)
  - Name:    root
    History: 
     - rpool/USERDATA/root_e2jj0s@autozsys_iynia9 (2020-04-30 14:21:48)
     - rpool/USERDATA/root_e2jj0s@mySavedState (2020-04-30 13:22:04)
     - rpool/USERDATA/root_e2jj0s-rpool.ROOT.ubuntu-idjvq9 (2020-04-29 15:21:01)
     - rpool/USERDATA/root_e2jj0s@autozsys_cwfpcd (2020-04-29 11:30:39)
     - rpool/USERDATA/root_e2jj0s@autozsys_fgw65h (2020-04-29 10:15:48)
     - rpool/USERDATA/root_e2jj0s@autozsys_wjdzc4 (2020-04-29 10:10:26)
     - rpool/USERDATA/root_fsmk5b (2020-04-29 09:41:28)
```

What can we see here?
* We have system states and states for each users.
* The history for each non current state have time associated when they were taken or last booted on.
* For the more curious, you will that that some states are made of:
  * filesystem datasets (current is "rpool/ROOT/ubuntu_qiq15o", there is another one as "rpool/ROOT/ubuntu_zums7p"),
  * some other are made of snapshots:
    * either automatically taken by Zsys ("rpool/ROOT/didrocks_qiq15o@autozsys_iynia9"). They are all formed by a **@autozsys_ prefix**.
    * or taken manually directly by the user ("rpool/USERDATA/didrocks_e2jj0s@mySavedState")
    * You will see that some snapshots are on the current filesystem datasets, but others are on older filesystem datasets (the prefix before the "@" differs). This means that this machine has already seen some system revert.
* Each system states have associated user states. You may see a curious "rpool/USERDATA/root_e2jj0s-rpool.ROOT.ubuntu-idjvq9" which is a shared state. We will come back to that later



We have already plunged a little bit deep in the state concepts, but if you are really curious about how many ZFS datasets a state is made of, you can run the `--full` option of `zsysctl show`.

```sh
Name:               rpool/ROOT/ubuntu_qiq15o
ZSys:               true
Last Used:          current
Last Booted Kernel: vmlinuz-5.4.0-28-generic
System Datasets:
 - bpool/BOOT/ubuntu_qiq15o
 - rpool/ROOT/ubuntu_qiq15o
 - rpool/ROOT/ubuntu_qiq15o/srv
 - rpool/ROOT/ubuntu_qiq15o/usr
 - rpool/ROOT/ubuntu_qiq15o/var
 - rpool/ROOT/ubuntu_qiq15o/usr/local
 - rpool/ROOT/ubuntu_qiq15o/var/games
 - rpool/ROOT/ubuntu_qiq15o/var/lib
 - rpool/ROOT/ubuntu_qiq15o/var/log
 - rpool/ROOT/ubuntu_qiq15o/var/mail
 - rpool/ROOT/ubuntu_qiq15o/var/snap
 - rpool/ROOT/ubuntu_qiq15o/var/spool
 - rpool/ROOT/ubuntu_qiq15o/var/www
 - rpool/ROOT/ubuntu_qiq15o/var/lib/AccountsService
 - rpool/ROOT/ubuntu_qiq15o/var/lib/NetworkManager
 - rpool/ROOT/ubuntu_qiq15o/var/lib/apt
 - rpool/ROOT/ubuntu_qiq15o/var/lib/dpkg
User Datasets:
 User: ubuntu
 - rpool/USERDATA/ubuntu_e2jj0s
 User: root
 - rpool/USERDATA/root_e2jj0s
Persistent Datasets: None
```

Showing only the current state, you can see additional informations: all datasets associated to that state This is only the current sate


-----------
Deep dive in zsys properties
* the generator
zpool import cache
create cache files
(generator is enabled at installation time by … symlink)
* zsys properties on system.
LastUsed (using snapshot times for snapshots)
Bootfs -> cloned and mounted datasets in initramfs only (for not mounting rpool/ROOT/…/var/lib children before optional persistent rpool/var/lib is mounted)
LastBooted kernel
user datasets: BootfsDatasets com.ubuntu.zsys:bootfs-datasets (linked to multiple datasets)
We store on snapshots the property as they were when snapshotted! We also track the local or inherited properties to that we only rebuild and reset correct local property when reverting

The link is on snapshot names for snapshots.
show snapshot properties

-----------
Convert from 18.04 with ZFS on root following this guide to zsys compatible

-----------
Future work and enhancements
Next cycle:
Future cycles:
